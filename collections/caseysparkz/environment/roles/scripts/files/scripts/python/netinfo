#!/usr/bin/env python3
# Copyright (C) 2025
# Author:       Casey Sparks
# Date:         February 09, 2022.
# Description:
"""Display information about a network interface."""

from argparse import ArgumentParser, Namespace
from collections.abc import Iterator
from fcntl import ioctl
from pathlib import Path
from socket import AF_INET, SOCK_DGRAM, inet_ntoa, socket
from struct import pack

from requests import get


def get_arguments() -> Namespace:
    """Get cmdline arguments.

    Returns:
        argparse.Namespace instance of user arguments.
    """
    parser = ArgumentParser(description=__doc__)

    parser.add_argument(  # --interface
        "-i",
        "--interface",
        dest="interface",
        type=str,
        help='Specify the network interface (like "eth0").',
    )
    parser.add_argument(  # --verbose
        "--verbose",
        "-v",
        dest="log_level",
        default=0,
        action="count",
        help="Specify logging verbosity. Default `CRITICAL`.",
    )

    arguments = parser.parse_args()
    arguments.log_level = range(40, -1, -10)[min(arguments.log_level, 3)]

    return arguments


def get_wan_interface() -> str:
    """Read the default gateway directly from /proc.

    Returns:
        The name of the WAN interface.
    """
    return next(route for route in all_routes() if route[1] == "00000000")[0]


def all_routes() -> Iterator[list]:
    """Iterator returning all routes read from '/proc/net/route'.

    Yields:
        All system network routes.
    """
    with Path("/proc/net/route").open(encoding="utf-8") as route_file:
        for line in route_file:
            yield line.strip().split()


def public_ip(stun_server: str = "https://ipinfo.io/ip") -> str:
    """Get our public IP address.

    Returns:
        The public IP address of the device.
    """
    return get(stun_server, timeout=2).text


def interface_info(iface: str) -> tuple:
    """Get the default gateway.

    Args:
        iface:           The network interface to query.

    Returns:
        Tuple of: (str(iface_ip), str(iface_gateway), str(iface_netmask))
    """

    def hex_to_octet(hex_data: str) -> str:
        return inet_ntoa(pack("<L", int(hex_data, 16)))

    sock = socket(AF_INET, SOCK_DGRAM)  # Open a socket.
    iface_ip = inet_ntoa(ioctl(sock.fileno(), 0x8915, pack("256s", bytes(iface[:15], "utf-8")))[20:24])
    iface_gateway = hex_to_octet(
        next(route for route in all_routes() if route[0] == iface and route[1] == "00000000")[2]
    )
    iface_netmask = hex_to_octet(
        next(
            route
            for route in all_routes()
            if route[0] == iface and route[7] != "00000000"  # Is not WAN gateway iface
        )[7]
    )

    return iface_ip, iface_gateway, iface_netmask


def print_table(iface: str) -> None:
    """Create and print a table.

    Args:
        iface: The network interface to tabulate.
    """
    div = 34 * "-"
    ip_address, gateway, netmask = interface_info(iface)
    table = [
        [div, ""],
        [iface, ""],
        [div, ""],
        ["Interface", iface],
        ["Public IP", public_ip()],
        ["Local IP", ip_address],
        ["Gateway", gateway],
        ["Netmask", netmask],
        [div, ""],
    ]

    for heading, data in table:
        print(f"{heading:<18}{data:>16}")


if __name__ == "__main__":
    args = get_arguments()

    print_table(args.interface or get_wan_interface())
