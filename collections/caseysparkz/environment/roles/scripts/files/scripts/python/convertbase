#!/usr/bin/env python3
# Copyright (C) 2025
# Author:       Casey Sparks
# Date:         December 22, 2023
# Description:
"""Convert a number to a different base system."""

from argparse import ArgumentParser, Namespace
from locale import LC_ALL, setlocale
from string import ascii_letters, digits
from sys import exit as sys_exit

setlocale(LC_ALL, "en_US.UTF-8")  # Set locale.

DIGITS = digits + ascii_letters


def get_arguments() -> Namespace:
    """Get cmdline arguments.

    Returns:
        argparse.Namespace instance of user arguments.
    """
    parser = ArgumentParser(description=__doc__)  # Instantiate argument parser.

    parser.add_argument("integer", type=str, help="The integer to convert.")
    parser.add_argument("input_base", type=int, default=10, help="The base system of :arg integer:.")
    parser.add_argument("output_base", type=int, default=2, help="The base system to convert to.")

    return parser.parse_args()


def convert(integer: (int, str), input_base: int = 10, output_base: int = 2) -> str:
    """Convert an integer of an arbitrary base system to a different base system.

    Args:
        integer:     The integer to convert.
        input_base:  The input base system.
        output_base: The output base system.

    Returns:
        The converted integer string.
    """
    try:
        if (inter_decimal := int(str(integer), input_base)) < 0:
            sign = -1
        elif inter_decimal == 0:
            return DIGITS[0]
        else:
            sign = 1

        inter_decimal *= sign
        digit_stack = []

        while inter_decimal:
            digit_stack.append(DIGITS[inter_decimal % output_base])

            inter_decimal //= output_base

        if sign < 0:
            digit_stack.append("-")

        digit_stack.reverse()

    except ValueError:
        print(f"Invalid input: {integer}")
        sys_exit(1)

    return "".join(digit_stack)


if __name__ == "__main__":
    args = get_arguments()

    print(convert(args.integer, args.input_base, args.output_base))
