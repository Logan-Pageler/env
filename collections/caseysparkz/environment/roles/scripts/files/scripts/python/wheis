#!/usr/bin/env python3
# Copyright (C) 2025
# Author:       Casey Sparks
# Date:         January 25, 2022
# Description:
"""whois for IP physical locations.

Uses api.ipstack.com for IP data.
"""

from argparse import ArgumentParser, Namespace
from ipaddress import ip_address
from os import getenv
from socket import getaddrinfo
from urllib.parse import urlparse

from requests import get
from tabulate import tabulate


def get_arguments() -> Namespace:
    """Get cmdline arguments.

    Returns:
        argparse.Namespace instance of user arguments.
    """
    parser = ArgumentParser(description=__doc__)

    parser.add_argument("hosts", type=str, nargs="+", help="List of IP addresses to retrieve.")

    return parser.parse_args()


def dig(url: str, port: int = 0) -> list[str]:
    """Resolve a URL to a list of IP addresses.

    Args:
        url:     The URL to resolve.
        port:    The port to connect to (via socket.getaddreinfo()).

    Returns:
        A set of resolved IP addresses.
    """
    return {t[4][0] for t in getaddrinfo(urlparse(url).netloc or url, port)}


def get_location_table(api_key: str, ip_addr: str) -> list:
    """Gets location data from IPStack.com and returns it as a list of lists.

    Args:
        api_key:     The IPStack API key for the request.
        ip_addr:     The IP address to get location info for.

    Returns:
        List object containing GeoIP data.
    """
    ip_info = get(f"http://api.ipstack.com/{ip_addr}", params={"access_key": api_key}, timeout=2).json()

    return [
        ["IP:", ip_info["ip"]],
        ["City:", ip_info["city"]],
        ["Region:", ip_info["region_name"]],
        ["ZIP:", ip_info["zip"]],
        ["Country:", ip_info["country_name"]],
        ["Coordinates:", f"{ip_info['latitude']}, {ip_info['longitude']}"],
    ]


if __name__ == "__main__":
    args = get_arguments()
    ip_addresses = set()

    for host in args.hosts:
        try:
            ip_address(host)
            ip_addresses.add(host)

        except ValueError:
            ip_addresses = ip_addresses.union(dig(host))

    for ip in ip_addresses:
        print(tabulate(get_location_table(getenv("IPSTACK_API_KEY"), ip)))
